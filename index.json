[{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"李宏毅-机器学习2021春-6  1 GNN 2 Deeep Reinforcement Learning (RL)  当人类也不知道什么是好的输出结果时，可以用RL。\n 2.1 RL与机器学习的关系 Step 1 Function with unknown parameters\n 用sample产生随机输出  Step 2 Define \u0026ldquo;Loss\u0026rdquo;\nStep 3 Optimization\n2.2 Policy Gradient 加入$A_n$，代表期望执行的程度。\n $\\gamma$：learning rate  Policy Gradient的步骤：\nOn-policy \u0026amp; Off-policy\n On-policy：用于训练的actor和用于交互的actor相同。 Off-policy：用于训练的actor和用于交互的actor不同。如Proximal Policy Optimization (PPO)。  2.3 Actor-Critic  Montre-Carlo (MC) based approach   Temporal-difference (TD) approach  Veresion 3.5\nVersion 4 —— Advantage Actor-Critic\nActor和Critic的参数可以共享：\n只采用Critic的方法：Q-learning（Rainbow）\n","date":"October 27, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/ml/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02021%E6%98%A5-6/","summary":"李宏毅-机器学习2021春-6  1 GNN 2 Deeep Reinforcement Learning (RL)  当人类也不知道什么是好的输出结果时，可以用RL。\n 2.1 RL与机器学习的关系 Step 1 Function with unknown parameters\n 用sample产生随机输出  Step 2 Define \u0026ldquo;Loss\u0026rdquo;\nStep 3 Optimization\n2.2 Policy Gradient 加入$A_n$，代表期望执行的程度。\n $\\gamma$：learning rate  Policy Gradient的步骤：\nOn-policy \u0026amp; Off-policy\n On-policy：用于训练的actor和用于交互的actor相同。 Off-policy：用于训练的actor和用于交互的actor不同。如Proximal Policy Optimization (PPO)。  2.3 Actor-Critic  Montre-Carlo (MC) based approach   Temporal-difference (TD) approach  Veresion 3.5\nVersion 4 —— Advantage Actor-Critic","tags":null,"title":"李宏毅-机器学习2021春-6"},{"categories":null,"contents":"李宏毅-机器学习2021春-2  1 机器学习任务攻略   Model bias：模型过于简单，有局限性\n  Optimization Issue：模型足够复杂了，但Optimization做的不够好。\n  Overfitting：在训练集上效果好，在测试集上效果差。解决方法如下：\n 增加训练数据，Data augmentation（图片左右翻转） 限制模型，减少模型的flexibility：  减少参数，共享参数（CNN） 减少features Early stopping Regularization Dropout      模型的复杂性需要在Overfitting和Model bias间进行trade-off\n  mismatch：训练集和测试集的数据分别不同\n  N-fold Cross Validation：将Training Set进行不同的分组，分别对模型进行训练和验证，得到的mse取平均值。\n  2 类神经网络训练不起来怎么办 2.1 Local Minima与Saddle Point Critical point包括Local Minima与Saddle Point。\n当有很多参数时，Local Minima几乎不存在。\n2.2 Batch与Momentum Batch  Shuffle：在一个epoch结束后重新分batch。  大Batch v.s. 小Batch\n  当考虑并行运算（gpu）后，大Batch的运行速度更快。\n  小Batch的noise更大，但这反而有助于训练。\n  结论：小Batch效果更好，但耗时间更多。\nMomentum 2.3 Adaptive Learning Rate $$ \\theta_i^{t+1}\\leftarrow\\theta_i^t-\\frac{\\eta}{\\sigma^t_i}g^t_i $$\n  Root Mean Square:\n  Used in Adagrad    RMSProp:\n     Learning Rate Scheduling\n Learning Rate Decay： Warm Up：    Summay of Optimization 2.4 Batch Normalization Feature Normalization 在实际中，由于$z^1$的改变，会引起$\\mu和\\sigma$的改变，进而引起$\\widetilde z^1、\\widetilde z^2、\\widetilde z^3$的改变，因此，整个Batch组成了一个大的神经网络。\nBatch Normalization $\\gamma$和$\\beta$一开始是全1和全0，它们作为参数，被机器学习。\n","date":"October 17, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/ml/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02021%E6%98%A5-2/","summary":"李宏毅-机器学习2021春-2  1 机器学习任务攻略   Model bias：模型过于简单，有局限性\n  Optimization Issue：模型足够复杂了，但Optimization做的不够好。\n  Overfitting：在训练集上效果好，在测试集上效果差。解决方法如下：\n 增加训练数据，Data augmentation（图片左右翻转） 限制模型，减少模型的flexibility：  减少参数，共享参数（CNN） 减少features Early stopping Regularization Dropout      模型的复杂性需要在Overfitting和Model bias间进行trade-off\n  mismatch：训练集和测试集的数据分别不同\n  N-fold Cross Validation：将Training Set进行不同的分组，分别对模型进行训练和验证，得到的mse取平均值。\n  2 类神经网络训练不起来怎么办 2.1 Local Minima与Saddle Point Critical point包括Local Minima与Saddle Point。\n当有很多参数时，Local Minima几乎不存在。\n2.2 Batch与Momentum Batch  Shuffle：在一个epoch结束后重新分batch。  大Batch v.s. 小Batch\n  当考虑并行运算（gpu）后，大Batch的运行速度更快。\n  小Batch的noise更大，但这反而有助于训练。","tags":null,"title":"李宏毅-机器学习2021春-2"},{"categories":null,"contents":"李宏毅-机器学习2021春-3  1 Classification 将Class用one-hot vector表示\n回归与分类的区别：\nsoftmax：\nLoss的计算：\n2 Convolutional Neural Network (CNN) 为Image Classification设计的网络。\n默认Image大小为100*100。\n Receptive field（感受野）：图像的一个局部特征   共享参数：w1，w2是相同的  receptive field + sharing parameteres = convolutional layer\n Convolutional layer：由一堆Filter组成，Filter捕捉图片里的pattern。 Feature Map：图片经过Convolution layer得到的结果    Pooling—Max Pooling\n  没有参数需要学习\n    Spatial Transformer Layer：解决CNN无法面对放大和旋转的问题\n  3 Self-attention 3.1 背景 当输入是多组向量时，输出的情况：\n 每一个向量都有一个label（sequence labeling），此处可以用self-attention 整个sequence有一个label 模型自己决定输出长度（seq to seq）  3.2 原理 Self-attention的输出$b^1$，既代表$a^1$，又代表$a^1$和$a^2$、$a^3$的关系。\n解释得到$b^1$的过程：\n  ●代表dot-product；此处不一定要用soft-max   完整过程：\n    3.3 Multi-head Self-attention 寻找多种相关性。\nPositional Encoding 为每一个位置设置一个位置向量$e^i$。\n3.4 其它变种 在语音辨识中，用于输入的数据很长，可以用Trancated Self-attention，只考虑每一段音频和周围的一定长度内的音频的关系。\nSelf-attention同样可以用于图片。\n。。。\nSelf-attention vs CNN 。。。\nSelf-attention vs RNN 。。。\nSelf-attention for Graph 。。。\n","date":"October 17, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/ml/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02021%E6%98%A5-3/","summary":"李宏毅-机器学习2021春-3  1 Classification 将Class用one-hot vector表示\n回归与分类的区别：\nsoftmax：\nLoss的计算：\n2 Convolutional Neural Network (CNN) 为Image Classification设计的网络。\n默认Image大小为100*100。\n Receptive field（感受野）：图像的一个局部特征   共享参数：w1，w2是相同的  receptive field + sharing parameteres = convolutional layer\n Convolutional layer：由一堆Filter组成，Filter捕捉图片里的pattern。 Feature Map：图片经过Convolution layer得到的结果    Pooling—Max Pooling\n  没有参数需要学习\n    Spatial Transformer Layer：解决CNN无法面对放大和旋转的问题\n  3 Self-attention 3.1 背景 当输入是多组向量时，输出的情况：\n 每一个向量都有一个label（sequence labeling），此处可以用self-attention 整个sequence有一个label 模型自己决定输出长度（seq to seq）  3.2 原理 Self-attention的输出$b^1$，既代表$a^1$，又代表$a^1$和$a^2$、$a^3$的关系。","tags":null,"title":"李宏毅-机器学习2021春-3"},{"categories":null,"contents":"李宏毅-机器学习2021春-4  1 Transformer Sequence-to-sequence（Seq2seq）\n 输出的长度由模型决定 Encoder+Decoder  1.1 Encoder encoder内部由许多block组成：\n每个block的构成如下：\n1.2 Decoder-Autoregressive(AT) 与Encoder的对比图：（Multi-Head Attention前加了一个Masked）\nMasked Self-attention  产生$b^1$的时候只能考虑$b^1$的资讯。 产生$b^2$的时候只能考虑$b^1$、$b^2$的资讯。 产生$b^3$的时候只能考虑$b^1$、$b^2$、$b^3$的资讯。  1.3 Encoder-Decoder Cross attention:\nTeacher Forcing: 用ground truth（答案）作为Decoder的输入\n1.4 Training Tips  Copy Mechanism Guided Attention Beam Search：不基于贪心的一种搜索算法  2 BERT  Self-supervised Learning  系统通过输入数据的一部分进行predict，另一部分输入用于进行比对。\n Masking Input   Next Sentence Prediction  对于BERT不是很有用     BERT经过Fine-tune，可用于下游任务。\n  BERT整体是Semi-supervised的。填空题（Pre-train）阶段是Self-supervised，Finetune阶段是supervised。\n 2.1 Bert Case  用于语义分析。输出类别。BERT是用填空题预训练的。   用于词性标注。输出和输出长度相同。   用于自然语言推测。输入两个句子，输出一个类别。   基于提取的问答系统  输入一个问题和一篇文档，输出答案的起始位置和结束位置。    2.2 Bert的其它应用 Bert可以应用于蛋白质分类、DNA分类、音乐分类。\nMulti-lingual BERT 用多种语言进行填空题训练。\n3 GPT ","date":"October 17, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/ml/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02021%E6%98%A5-4/","summary":"李宏毅-机器学习2021春-4  1 Transformer Sequence-to-sequence（Seq2seq）\n 输出的长度由模型决定 Encoder+Decoder  1.1 Encoder encoder内部由许多block组成：\n每个block的构成如下：\n1.2 Decoder-Autoregressive(AT) 与Encoder的对比图：（Multi-Head Attention前加了一个Masked）\nMasked Self-attention  产生$b^1$的时候只能考虑$b^1$的资讯。 产生$b^2$的时候只能考虑$b^1$、$b^2$的资讯。 产生$b^3$的时候只能考虑$b^1$、$b^2$、$b^3$的资讯。  1.3 Encoder-Decoder Cross attention:\nTeacher Forcing: 用ground truth（答案）作为Decoder的输入\n1.4 Training Tips  Copy Mechanism Guided Attention Beam Search：不基于贪心的一种搜索算法  2 BERT  Self-supervised Learning  系统通过输入数据的一部分进行predict，另一部分输入用于进行比对。\n Masking Input   Next Sentence Prediction  对于BERT不是很有用     BERT经过Fine-tune，可用于下游任务。\n  BERT整体是Semi-supervised的。填空题（Pre-train）阶段是Self-supervised，Finetune阶段是supervised。\n 2.1 Bert Case  用于语义分析。输出类别。BERT是用填空题预训练的。   用于词性标注。输出和输出长度相同。   用于自然语言推测。输入两个句子，输出一个类别。   基于提取的问答系统  输入一个问题和一篇文档，输出答案的起始位置和结束位置。    2.","tags":null,"title":"李宏毅-机器学习2021春-4"},{"categories":null,"contents":"李宏毅-机器学习2021春-5  1 Word Embedding  将每一个Word都投影到一个High Dimension的空间上。 相似的词距离近。 不同的Dimension代表不同的含义。    Word Embedding是一个unsupervised的过程。机器通过阅读大量文章，根据上下文信息进行学习。\n  Counting based\n  Prediction based：拿出Prediction Model的第一个hiden layer，即可得到word embedding.\n    2 Recurrent Neural Network ​ 有记忆的NN。\nLong Shor-term Memory(LSTM) ","date":"October 17, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/ml/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02021%E6%98%A5-5/","summary":"李宏毅-机器学习2021春-5  1 Word Embedding  将每一个Word都投影到一个High Dimension的空间上。 相似的词距离近。 不同的Dimension代表不同的含义。    Word Embedding是一个unsupervised的过程。机器通过阅读大量文章，根据上下文信息进行学习。\n  Counting based\n  Prediction based：拿出Prediction Model的第一个hiden layer，即可得到word embedding.\n    2 Recurrent Neural Network ​ 有记忆的NN。\nLong Shor-term Memory(LSTM) ","tags":null,"title":"李宏毅-机器学习2021春-5"},{"categories":null,"contents":"李宏毅-机器学习2021春-1  1 机器学习基本概念 1.1 机器学习基本任务 机器学习的基本任务：寻找一个函数\n不同种类的函数：\n Regression（回归）：函数输出一个标量  如：预测PM2.5   Clssificatiion（分类）：给定选项，函数输出选项  如：Alpha Go下棋   Structured Learning：创造一些结构（图片，文件）  1.2 通过训练数据定义Loss Loss 也是一个函数，它的输入是Model中的parameters： $$ L(b,w) $$\nLoss function：$L=\\frac{1}{N}\\sum_ne_n$\n Mean Absolute Error(MAE)：$e=|y-\\hat{y}|$ Mean Square Error(MSE)：$e=(y-\\hat{y})^2$  1.3 Optimization 目标：得到最优的参数。 $$ w^{*}, b^{*}=\\arg \\min _{w, b} L $$ 方式：Gradient Descent\n 一个参数w的情况  随机选取初始值$w^0$ 计算$\\left.\\frac{\\partial L}{\\partial \\mathcal{\\imath}}\\right|_{w=w^{0}}$ learning rate：$\\eta$，表示梯度下降的速率 不断更新w：$w^{1} \\leftarrow w^{0}-\\left.\\eta \\frac{\\partial L}{\\partial w}\\right|_{w=w^{0}}$     两个参数的情况：  2 深度学习基本概念 2.1 Function 使用Piecewise Linear Curves逼近连续的曲线。\nPiecewise Linear Curves = constant + Sigmoid函数\n调整w、b、c，得到不同的Sigmoid Function\n以此构造神经网络。\n2.2 Loss Loss：与之前相同，输入同样是一堆参数。\n2.3 Optimization $$ \\theta^*=arg min_\\theta L $$\n 每次更新一次参数叫做一次update，吧所有的batch都看过以便叫做一个epoch。  反向传播 从后往前计算偏导数，得到完整的梯度。\n2.4 Sigmoid-\u0026gt;ReLU 两个ReLu叠起来构成一个Hard Sigmoid。\n","date":"October 15, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/ml/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02021%E6%98%A5-1/","summary":"李宏毅-机器学习2021春-1  1 机器学习基本概念 1.1 机器学习基本任务 机器学习的基本任务：寻找一个函数\n不同种类的函数：\n Regression（回归）：函数输出一个标量  如：预测PM2.5   Clssificatiion（分类）：给定选项，函数输出选项  如：Alpha Go下棋   Structured Learning：创造一些结构（图片，文件）  1.2 通过训练数据定义Loss Loss 也是一个函数，它的输入是Model中的parameters： $$ L(b,w) $$\nLoss function：$L=\\frac{1}{N}\\sum_ne_n$\n Mean Absolute Error(MAE)：$e=|y-\\hat{y}|$ Mean Square Error(MSE)：$e=(y-\\hat{y})^2$  1.3 Optimization 目标：得到最优的参数。 $$ w^{*}, b^{*}=\\arg \\min _{w, b} L $$ 方式：Gradient Descent\n 一个参数w的情况  随机选取初始值$w^0$ 计算$\\left.\\frac{\\partial L}{\\partial \\mathcal{\\imath}}\\right|_{w=w^{0}}$ learning rate：$\\eta$，表示梯度下降的速率 不断更新w：$w^{1} \\leftarrow w^{0}-\\left.\\eta \\frac{\\partial L}{\\partial w}\\right|_{w=w^{0}}$     两个参数的情况：  2 深度学习基本概念 2.","tags":null,"title":"李宏毅-机器学习2021春-1"},{"categories":null,"contents":"红黑树  性质  是一种特殊的**二叉查找树**（任意节点的左子树上的节点小于该节点，右子树上的节点大于该节点） 每个节点都是红色或黑色 每个叶子节点的子节点（NULL节点）为黑色 红色节点的子节点都是黑色 从一个结点到其所有的后代叶子结点的路径上包含的黑色结点数量相同。  性质5确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树。\n应用 主要是用它来存储有序的数据，它的时间复杂度是O(lgn)，效率非常之高。\n例如：\n Java集合中的TreeSet和TreeMap C++ STL中的set、map Linux虚拟内存的管理  基本操作 左旋\u0026amp;右旋 添加   将红黑树当作一颗二叉查找树，将节点插入，着色为红色。\n  由于可能违背了性质4，故需要调整。分三种情况：\n  叔叔是红色\n  叔叔是黑色，且当前节点是右孩子\n  叔叔是黑色，且当前节点是左孩子\n    删除 ","date":"September 22, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/algorithmdatastructure/%E7%BA%A2%E9%BB%91%E6%A0%91/","summary":"红黑树  性质  是一种特殊的**二叉查找树**（任意节点的左子树上的节点小于该节点，右子树上的节点大于该节点） 每个节点都是红色或黑色 每个叶子节点的子节点（NULL节点）为黑色 红色节点的子节点都是黑色 从一个结点到其所有的后代叶子结点的路径上包含的黑色结点数量相同。  性质5确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树。\n应用 主要是用它来存储有序的数据，它的时间复杂度是O(lgn)，效率非常之高。\n例如：\n Java集合中的TreeSet和TreeMap C++ STL中的set、map Linux虚拟内存的管理  基本操作 左旋\u0026amp;右旋 添加   将红黑树当作一颗二叉查找树，将节点插入，着色为红色。\n  由于可能违背了性质4，故需要调整。分三种情况：\n  叔叔是红色\n  叔叔是黑色，且当前节点是右孩子\n  叔叔是黑色，且当前节点是左孩子\n    删除 ","tags":null,"title":"红黑树"},{"categories":null,"contents":"知识梳理 2  4 CPU调度 基本概念  CPU调度：在主存中选择运行实体（ready queue中的进程/线程），并将CPU分配给它。在内核状态下选择、分配、激活。\n  进程执行周期：CPU burst + I/O burst  CPU burst：进程在 running state I/O burst：进程在 waiting state   进程调度需要以下两个部件：  短期调度程序（short-term scheduler） 分派程序（dispatcher）：将CPU分配给短期调度程序选择的进程，功能包括  进程上下文切换 转到user mode 跳到用户程序的合适位置重新开始执行        上图中的t0-t3为派遣时延（dispatch latency）\n  调度什么时候出现：（1,2为非抢占式，3,4为抢占式）\n 进程终止 运行的进程转为waiting状态（e.g., 进程主动I/O requests，或调用wait等待子进程终止） 运行的进程转为ready状态（e.g.，中断出现，或时间戳结束） waiting-\u0026gt;ready（e.g.，I/O完成）    调度准则 调度算法 ","date":"September 3, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/os/%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86-2/","summary":"知识梳理 2  4 CPU调度 基本概念  CPU调度：在主存中选择运行实体（ready queue中的进程/线程），并将CPU分配给它。在内核状态下选择、分配、激活。\n  进程执行周期：CPU burst + I/O burst  CPU burst：进程在 running state I/O burst：进程在 waiting state   进程调度需要以下两个部件：  短期调度程序（short-term scheduler） 分派程序（dispatcher）：将CPU分配给短期调度程序选择的进程，功能包括  进程上下文切换 转到user mode 跳到用户程序的合适位置重新开始执行        上图中的t0-t3为派遣时延（dispatch latency）\n  调度什么时候出现：（1,2为非抢占式，3,4为抢占式）\n 进程终止 运行的进程转为waiting状态（e.g., 进程主动I/O requests，或调用wait等待子进程终止） 运行的进程转为ready状态（e.g.，中断出现，或时间戳结束） waiting-\u0026gt;ready（e.g.，I/O完成）    调度准则 调度算法 ","tags":null,"title":"知识梳理 2"},{"categories":null,"contents":"Part 1  1 Linux终端与主机   Ctrl-A的ASCII码是1，Ctrl-B的ASCII码是2，Ctrl-C的ASCII码是3，。。。，Ctrl-Z的ASCII码是26\n  Esc的ASCII码是27\n  行律功能调整：stty\n 查看：stty -a stty erase ^H    流控方式：\n 硬件方式：RS232接口的CTS信号（Clear To Send）（不好） 软件方式：利用流控字符Xon（Ctrl-S, 17）和Xoff（Ctrl-Q，19）  2 系统状态查看 2.1 用户登录 Linux用户分为：\n root用户（超级用户） 普通用户  创建新用户：\n 由root用户创建（useradd命令），用户信息存放在/etc/passwd文件中，包括用户名和用户ID，以及Home目录，登录shell  登录shell：一般为bash，也可以选其它shell，甚至自己设计的程序。    登录后的shell提示符：\n $：Bourne Shell系列（sh，ksh，bash） #：当前用户为超级用户root  2.2 查看手册、时间、计算器、口令维护 Linux命令大小写敏感。\n几种常用的系统命令：\n  man：查看系统常用手册\n  date：读取系统日期和时间\n  cal：日历\n cal 10 2019 cal 2019    bc：计算器\n  passwd：更换口令\n  安全性：无法由哈希值倒推出原口令    2.3 了解系统状态   who：确定谁在系统中\n  uptime：已开机时间（年龄）\n  top：列出资源占用排名靠前的进程\n  ps：查阅进程状态（process status）\n ps / ps -e / ps -ef / ps -el    free：了解内存使用情况\n  3 文本文件的处理 3.1 文本文件处理工具 进程的标准输入/输出：\n stdin（键盘） stdout（屏幕）  重定向机制：\n 输出重定向：ls -l \u0026gt; filelist.txt 输入重定向：sort \u0026lt; filelist.txt  管道机制：\n ls -l | sort  3.2 文本文件读取   more/less：逐屏显示文件\n  cat与od：列出文件内容\n  head和tail：显示文件的头部或者尾部\n  3.3 文本数据的处理   tee：三通\n ./mymap | tee mymap.log，将应当在屏幕上输出的信息同时抄送到文件中    wc：字计数\n wc -l：统计行数    sort：排序\n  tr：翻译字符\n      uniq：筛选文件中的重复行（上下紧邻的两行重复）\n  ","date":"September 2, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/linux/part-1/","summary":"Part 1  1 Linux终端与主机   Ctrl-A的ASCII码是1，Ctrl-B的ASCII码是2，Ctrl-C的ASCII码是3，。。。，Ctrl-Z的ASCII码是26\n  Esc的ASCII码是27\n  行律功能调整：stty\n 查看：stty -a stty erase ^H    流控方式：\n 硬件方式：RS232接口的CTS信号（Clear To Send）（不好） 软件方式：利用流控字符Xon（Ctrl-S, 17）和Xoff（Ctrl-Q，19）  2 系统状态查看 2.1 用户登录 Linux用户分为：\n root用户（超级用户） 普通用户  创建新用户：\n 由root用户创建（useradd命令），用户信息存放在/etc/passwd文件中，包括用户名和用户ID，以及Home目录，登录shell  登录shell：一般为bash，也可以选其它shell，甚至自己设计的程序。    登录后的shell提示符：\n $：Bourne Shell系列（sh，ksh，bash） #：当前用户为超级用户root  2.2 查看手册、时间、计算器、口令维护 Linux命令大小写敏感。\n几种常用的系统命令：\n  man：查看系统常用手册\n  date：读取系统日期和时间\n  cal：日历\n cal 10 2019 cal 2019    bc：计算器","tags":null,"title":"Part 1"},{"categories":null,"contents":"Part 2  1 正则表达式 1.1 基础  正则表达式与文件匹配符规则不同。\n 六个元字符：. * $ ^ [ \\\n . 代表任意字符 x* 代表任意多个x（0-n个） 123$ 代表匹配文件行尾的123 ^123 代表匹配每行起始的123 []用于定义区间 \\1 \\2代表前面的第一部分和第二部分  定义集和\n ERE、PCRE：扩展的正则表达式  1.2 跟正则表达式相关的命令   grep/egrep/fgrep\n 语法：grep 模式 文件名列表 egrep：用扩展正则表达式搜索 fgrep：快速搜索字符串，不用正则表达式规则    sed：流编辑\n  awk：逐行扫描进行文本处理的一门语言\n  ","date":"September 2, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/linux/part-2/","summary":"Part 2  1 正则表达式 1.1 基础  正则表达式与文件匹配符规则不同。\n 六个元字符：. * $ ^ [ \\\n . 代表任意字符 x* 代表任意多个x（0-n个） 123$ 代表匹配文件行尾的123 ^123 代表匹配每行起始的123 []用于定义区间 \\1 \\2代表前面的第一部分和第二部分  定义集和\n ERE、PCRE：扩展的正则表达式  1.2 跟正则表达式相关的命令   grep/egrep/fgrep\n 语法：grep 模式 文件名列表 egrep：用扩展正则表达式搜索 fgrep：快速搜索字符串，不用正则表达式规则    sed：流编辑\n  awk：逐行扫描进行文本处理的一门语言\n  ","tags":null,"title":"Part 2"},{"categories":null,"contents":"SDN 1  1 SDN概述 1.1 SDN之前的网络架构 1.2 SDN定义  网络控制和转发功能解耦合，使得网络控制功能可直接编程。 Openflow协议是SDN方案的基础。 SDN的开放分层架构加速了网络产业的参与度，越来越多的网络用户、网络软件公司参与到参与中。  1.3 SDN的分层体系结构 ","date":"September 2, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/sdn/sdn-1/","summary":"SDN 1  1 SDN概述 1.1 SDN之前的网络架构 1.2 SDN定义  网络控制和转发功能解耦合，使得网络控制功能可直接编程。 Openflow协议是SDN方案的基础。 SDN的开放分层架构加速了网络产业的参与度，越来越多的网络用户、网络软件公司参与到参与中。  1.3 SDN的分层体系结构 ","tags":null,"title":"SDN 1"},{"categories":null,"contents":"知识梳理 1  1 Introduction 计算机启动过程  BIOS -\u0026gt; MBR -\u0026gt; boot loader -\u0026gt; kernel -\u0026gt; init process\n  当我们打开计算机电源，计算机会自动从主板的BIOS(Basic Input/Output System)读取其中所存储的程序。这一程序通常知道一些直接连接在主板上的硬件(硬盘，网络接口，键盘，串口，并口)。现在大部分的BIOS允许你从软盘、光盘或者硬盘中选择一个来启动计算机。 下一步，计算机将从你所选择的存储设备中读取起始的512 bytes。这512 bytes叫做主引导记录MBR (master boot record)。MBR会告诉电脑从该设备的某一个分区(partition)来装载引导加载程序(boot loader)。Boot loader储存有操作系统(OS)的相关信息，比如操作系统名称，操作系统内核 (kernel)所在位置等。 随后，boot loader将kernel加载到内存中。kernel实际上是一个用来操作计算机的程序，它是计算机操作系统的内核，主要的任务是管理计算机的硬件资源，充当软件和硬件的接口。操作系统上的任何操作都要通过kernel传达给硬件。Windows和Linux各自有自己kernel。狭义的操作系统就是指kernel，广义的操作系统包括kernel以及kernel之上的各种应用。 kernel开始加载第一个进程，例如\u0026quot;init\u0026quot;，并等待事件的出现。  事件  中断（interrupt/trap）：由硬件或外设触发，通过系统总线发一个信号给CPU，一般为异步方式。  中断会有一个中断ID。 程序会保存中断发生前一时刻的执行现场（保存一些寄存器中的值），然后去转到中断的服务例程执行中断。 中断完毕后，OS再恢复之前保存的处理状态，故中断是对应用程序透明的。 如：read系统调用后，系统发出读磁盘的操作，当磁盘数据准备好后，向OS发出一个异步通知消息。   异常（exception）：由应用程序触发，一般为同步方式。  异常也有异常编号ID，也会保存现场。 如：除0异常，无效地址访问   系统调用（system call）：由应用程序触发，应用程序向OS请求某个服务，异步或同步。  大多由应用程序通过API调用，而非直接由系统调用     存储结构 I/O 结构  每个设备控制器控制一种设备，负责控制数据在它自己的本地缓存和外部设备中的移动。 OS 为每个设备控制器分配了一个设备驱动器。  DMA（Direct Memory Access）——用于大块数据的移动\n 设备控制器直接将一整块数据在它的缓冲区和内存中移动，不需要CPU的干预。 每一块只会产生一个中断（告知设备驱动器）  User Mode \u0026amp; Kernel Mode  用户态：CPU无法执行一下特权指令 内核态：CPU可以执行特权指令  2 进程 进程状态  New: 进程被创建 Ready：进程等待被分配给一个处理器 Running：正在执行 Waiting：进程等待某个事件（如I/O完成或信号接收 Terminated：进程执行完毕  进程控制块 (PCB Process Control Block) 在OS中，每个进程由一个PCB表示。它包括：\n 进程状态 程序计数器 CPU寄存器 CPU调度信息 。。。  进程调度  job queue: 等待某一特定I/O设备的进程的链表 ready queue：处于ready状态的进程的链表   调度器（Scheduler）：  长期调度（job scheduler）：从任务池（辅存）里挑选进程，送入ready queue（内存）。 短期调度（CPU scheduler）：从ready queue中选择分配给CPU执行的进程。 中期调度：将进程从内存或从CPU竞争中移出，从而降低多道程序设计的程度，之后进程能被重新调入内存，并从中断处继续执行。    当CPU转到另一个进程时，系统需要保存旧进程的状态，并通过contex switch（上下文切换）导入新进程的状态。\n对进程的操作  进程由进程标识符（pid）标识。\n  在UNIX系统中，一个新进程通过fork()系统调用创建。新进程拥有原进程的地址空间。 fork()的返回值：  子进程：0 父进程：子进程的pid   exec()系统调用由两个进程之一调用，用于将进程的内存空间替换为一个新的程序。 父进程可以通过abort()终止子进程。  进程间通信 两种基本模型：\n 共享内存：生产者-消费者问题 消息传递  3 线程 线程包括：线程ID、程序计数器、寄存器集、栈\n 多线程之间共享：代码段、数据段、其它OS资源（如打开的文件和信号）  多线程模型  用户线程：由OS直接管理，位于内核之上 内核线程  三种模型：\n 多对一：一个内核线程阻塞导致全部用户线程阻塞 一对一：线程总数受限 多对多：运行OS创造足够数量的内核线程  ","date":"September 2, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/os/%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86-1/","summary":"知识梳理 1  1 Introduction 计算机启动过程  BIOS -\u0026gt; MBR -\u0026gt; boot loader -\u0026gt; kernel -\u0026gt; init process\n  当我们打开计算机电源，计算机会自动从主板的BIOS(Basic Input/Output System)读取其中所存储的程序。这一程序通常知道一些直接连接在主板上的硬件(硬盘，网络接口，键盘，串口，并口)。现在大部分的BIOS允许你从软盘、光盘或者硬盘中选择一个来启动计算机。 下一步，计算机将从你所选择的存储设备中读取起始的512 bytes。这512 bytes叫做主引导记录MBR (master boot record)。MBR会告诉电脑从该设备的某一个分区(partition)来装载引导加载程序(boot loader)。Boot loader储存有操作系统(OS)的相关信息，比如操作系统名称，操作系统内核 (kernel)所在位置等。 随后，boot loader将kernel加载到内存中。kernel实际上是一个用来操作计算机的程序，它是计算机操作系统的内核，主要的任务是管理计算机的硬件资源，充当软件和硬件的接口。操作系统上的任何操作都要通过kernel传达给硬件。Windows和Linux各自有自己kernel。狭义的操作系统就是指kernel，广义的操作系统包括kernel以及kernel之上的各种应用。 kernel开始加载第一个进程，例如\u0026quot;init\u0026quot;，并等待事件的出现。  事件  中断（interrupt/trap）：由硬件或外设触发，通过系统总线发一个信号给CPU，一般为异步方式。  中断会有一个中断ID。 程序会保存中断发生前一时刻的执行现场（保存一些寄存器中的值），然后去转到中断的服务例程执行中断。 中断完毕后，OS再恢复之前保存的处理状态，故中断是对应用程序透明的。 如：read系统调用后，系统发出读磁盘的操作，当磁盘数据准备好后，向OS发出一个异步通知消息。   异常（exception）：由应用程序触发，一般为同步方式。  异常也有异常编号ID，也会保存现场。 如：除0异常，无效地址访问   系统调用（system call）：由应用程序触发，应用程序向OS请求某个服务，异步或同步。  大多由应用程序通过API调用，而非直接由系统调用     存储结构 I/O 结构  每个设备控制器控制一种设备，负责控制数据在它自己的本地缓存和外部设备中的移动。 OS 为每个设备控制器分配了一个设备驱动器。  DMA（Direct Memory Access）——用于大块数据的移动","tags":null,"title":"知识梳理 1"},{"categories":null,"contents":"1 Introduction  DBMS \u0026amp; DBS\n DBS：数据库系统  包括：DBMS、数据库、数据库应用程序、数据库管理人员   DBMS：数据库管理系统  对数据的管理包括：定义信息的存储格式、提供操作信息的方法    三级模式结构\n 内模式（物理层）：数据如何存储、第层数据结构 逻辑模式（逻辑层）：描述数据库中存的是什么数据，以及这些数据之间的关系，数据库管理人员运用逻辑层的抽象。是一个全局逻辑结构。 外模式（视图层）：数据库用户能够看到的和使用的局部数据的逻辑结构。系统可以为同一个数据库提供多个视图。  逻辑数据独立性：当概念模式变化时，可以不改变外部模式和应用程序。\n物理数据独立性：当内部模式变化时，可以不改变概念模式和外部模式。\n  Instance（实例）：某一时刻，数据库中存储的数据集合\n  Schema（模式）：数据库系统的总体设计\n  Data-Definition Language (DDL)：create、alter、drop\n  Data-Manipulation Language (DML)：如SQL中的insert、delete from、update\n  ","date":"August 30, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/database/1-introduction/","summary":"1 Introduction  DBMS \u0026amp; DBS\n DBS：数据库系统  包括：DBMS、数据库、数据库应用程序、数据库管理人员   DBMS：数据库管理系统  对数据的管理包括：定义信息的存储格式、提供操作信息的方法    三级模式结构\n 内模式（物理层）：数据如何存储、第层数据结构 逻辑模式（逻辑层）：描述数据库中存的是什么数据，以及这些数据之间的关系，数据库管理人员运用逻辑层的抽象。是一个全局逻辑结构。 外模式（视图层）：数据库用户能够看到的和使用的局部数据的逻辑结构。系统可以为同一个数据库提供多个视图。  逻辑数据独立性：当概念模式变化时，可以不改变外部模式和应用程序。\n物理数据独立性：当内部模式变化时，可以不改变概念模式和外部模式。\n  Instance（实例）：某一时刻，数据库中存储的数据集合\n  Schema（模式）：数据库系统的总体设计\n  Data-Definition Language (DDL)：create、alter、drop\n  Data-Manipulation Language (DML)：如SQL中的insert、delete from、update\n  ","tags":null,"title":"1 Introduction"},{"categories":null,"contents":"2 Relation Database    关系模式\n  关系实例\n  super key：一个或多个属性的集合，这些属性的组合可以使我们在一个关系中唯一地标识一个元组。\n  candidate key：最小的super key\n  primary key：被设计者选中的 candidate key\n  **foreign key: ** 一个关系模式（r1）在它的属性中包括另一个关系模式（r2）的 primary key，则这个属性在r1上称作参照r2的 foreign key.\n r1称作 foreign key 依赖的参照关系（referencing relation），r2称作 foreign key 的被参照关系(referenced relation)。 **参照完整性约束(referential integrity constraint): **在参照关系中任意元组在特定属性上的取值必然等于被参照关系在特定属性上的取值。    ","date":"August 30, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/database/2-relation-database/","summary":"2 Relation Database    关系模式\n  关系实例\n  super key：一个或多个属性的集合，这些属性的组合可以使我们在一个关系中唯一地标识一个元组。\n  candidate key：最小的super key\n  primary key：被设计者选中的 candidate key\n  **foreign key: ** 一个关系模式（r1）在它的属性中包括另一个关系模式（r2）的 primary key，则这个属性在r1上称作参照r2的 foreign key.\n r1称作 foreign key 依赖的参照关系（referencing relation），r2称作 foreign key 的被参照关系(referenced relation)。 **参照完整性约束(referential integrity constraint): **在参照关系中任意元组在特定属性上的取值必然等于被参照关系在特定属性上的取值。    ","tags":null,"title":"Relation Database"},{"categories":null,"contents":"3 SQL  Data Definition  create table  create table instructor( ID char(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2), primary key(ID), foreign key(dept_name) references department, check(salary\u0026gt;0); )  insert  insert into instructor values(080040, \u0026#39;Jack\u0026#39;, \u0026#39;Com.Sci\u0026#39;, 8000)  delete  delete from isntructor  drop  drop table r  alter table  alter table r add A D alter table r drop A Select Query select distinct dept_name from instructor # 去重 select all dept_name from instructor # 不去重 select T.name as instructor_name, course_id from isntructor as T, instructor as S where T.salary \u0026gt; S.salary and S.dept_name = \u0026#39;Comp.Sci\u0026#39; and salary between 9000 and 10000 order by name desc # asc上升 select dept_name, avg(salary) as avg_salary from instructor group by dept_name Join  natural join outer join  ","date":"August 30, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/database/3-sql/","summary":"3 SQL  Data Definition  create table  create table instructor( ID char(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2), primary key(ID), foreign key(dept_name) references department, check(salary\u0026gt;0); )  insert  insert into instructor values(080040, \u0026#39;Jack\u0026#39;, \u0026#39;Com.Sci\u0026#39;, 8000)  delete  delete from isntructor  drop  drop table r  alter table  alter table r add A D alter table r drop A Select Query select distinct dept_name from instructor # 去重 select all dept_name from instructor # 不去重 select T.","tags":null,"title":"SQL"},{"categories":null,"contents":"大数据组件  Google的“三驾马车”：\n Google File System (GFS)  适用于大规模分布式数据处理的、可扩展的分布式文件系统   MapReduce  一种用于大规模分布式数据的计算框架   BigTable  –一种构建在GFS之上的分布式数据库系统    1 Hadoop Hadoop是Apache软件基金会旗下的一个开源的大数据处理框架。\nHadoop基础架构 –NameNode：负责管理HDFS的元数据信息\n–Secondary NameNode：协助NameNode管理HDFS元数据信息\n–DataNode：负责实际数据的存储\n–JobTracker：负责MapReduce作业管理、资源调度等\n–TaskTrack：负责Map以及Reduce任务的执行和任务状态的回报\nHadoop生态系统 2 HDFS  Hadoop Distributed File System 与MaReduce同为Hadoop的核心组件 块级别的分布式文件系统  3 HBase  HBase是谷歌BigTable的开源实现，因此，具有与 BigTable类似的特性 采用HDFS作为底层存储 依赖Zookeeper提供的分布式协调服务  与传统关系型数据库的区别：\n 数据类型：关系数据库采用关系模型，具有丰富的数据类型和存储方式；HBase则采用了更加简单的数据模型， 它把数据存储为未经解释的字符串。 数据操作：只有简单的插入、查询、删除、清空。 存储模式：基于列存储，每个列族都由几个文件保存，不同列族的文件是分离的。 数据索引：HBase只有一个索引——行键，HBase中的所有访问方法，或者通过行键访问，或 者通过行键扫描。 数据维护：在HBase中执行更新操作时，并不会删除数据旧的版本，而 是生成一个新的版本，旧的版本仍然保留。  HBase系统架构  HMaster  HMaster可以存在多个，主HMaster由ZooKeeper动态选举 产生 协调RegionServer 管理元信息   ZooKeeper  内部存储着有关HBase的重要元信息和状态信息，担任HMaster与RegionServer之间的服务协调角色   RegionServer  负责Region的存储和管理并与Client交互 处理读写请求   Client  Client提供HBase访问接口 与RegionServer交互读写数 据，并维护cache加快对HBase的访问速度。    4 Kafka 为了降低数据生产者和消费者之间的耦合度而引入的一层“中间件”。\nKafaka架构  Producer：Producer将数据转化成“消息”，并通过网络发给 Broker。每条消息表示为一个三元组\u0026lt;topic, key, message\u0026gt; Broker：一般有多个，它们组成一个分布式高容错集群。Broker以追加的方式将消息写到磁盘文件中 Consumer：主动从Broker拉取消息进行处理  在Kafka集群中，ZooKeeper担任分布式服务协调作 用，Broker和Consumer直接依赖于ZooKeeper才能正常工作。\n5 Sqoop 为了解决关系型数据库与Hadoop之间的数据传输问题 ，Sqoop应运而生，它构建了两者之间的“桥梁”。\n6 Flume 它是一个通用的流式数据收集系统，可以将不同数据源产生的流式数据近实时地发送到后端中心化的存储系统中。\n基本架构 数据源产生的流数据被一系 列Flume Agent收集（和处理），所收集的数据最终被送到 到目标（存储）系统。一个Agent可从客户端或上一个Agent 接受数据，经过过滤、路由，操作后传递给下一个或多个 Agent，直到抵达指定的目标系统。\nFlume将数据流水线中传递的数据称为“Event”，每个 Event由头部和字节数组构成，其中，头部由一系列 key/value构成。\nFlume Agent内部主要由三个组件构成：\n Source：数据的收集端，负责将数据捕获后进行特殊的格 式化，将数据封装到Event中，然后将Event推入Channel中 Channel：一个缓存区，它暂存Source写入的Event，直到被 Sink发送出去。 Sink：负责从Channel中读取Event，并将读取的Event发送 给下一个Agent（的Source）或持久化到存储系统。  7 Lambda架构 一种大数据软件设计架构，其目的是指导用户充分利用批处理和流式计算技术各自的优点实现复杂的大数据处理系统。\n  批处理层：其优点是吞吐率高，缺点是数据处理延迟高，即从数据产生到最终被处理完成，整个过程用时较长\n  流式处理层：为了降低批处理层带来的高延迟，流式处理层被引入。缺点是无法进行复杂的逻辑计算，得到的结果往往是近似解。\n  服务层：批处理层和流式处理层可以结合在一起，这样既保证数据延迟低，也能完成复杂的逻辑计算。为了整合两层的计算结果，服务层被引入，它对外提供了统一的访问接口以方便用户使用。\n  推荐系统-Lambda架构的经典案例\n  ","date":"August 30, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/bigdata/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%84%E4%BB%B6/","summary":"大数据组件  Google的“三驾马车”：\n Google File System (GFS)  适用于大规模分布式数据处理的、可扩展的分布式文件系统   MapReduce  一种用于大规模分布式数据的计算框架   BigTable  –一种构建在GFS之上的分布式数据库系统    1 Hadoop Hadoop是Apache软件基金会旗下的一个开源的大数据处理框架。\nHadoop基础架构 –NameNode：负责管理HDFS的元数据信息\n–Secondary NameNode：协助NameNode管理HDFS元数据信息\n–DataNode：负责实际数据的存储\n–JobTracker：负责MapReduce作业管理、资源调度等\n–TaskTrack：负责Map以及Reduce任务的执行和任务状态的回报\nHadoop生态系统 2 HDFS  Hadoop Distributed File System 与MaReduce同为Hadoop的核心组件 块级别的分布式文件系统  3 HBase  HBase是谷歌BigTable的开源实现，因此，具有与 BigTable类似的特性 采用HDFS作为底层存储 依赖Zookeeper提供的分布式协调服务  与传统关系型数据库的区别：\n 数据类型：关系数据库采用关系模型，具有丰富的数据类型和存储方式；HBase则采用了更加简单的数据模型， 它把数据存储为未经解释的字符串。 数据操作：只有简单的插入、查询、删除、清空。 存储模式：基于列存储，每个列族都由几个文件保存，不同列族的文件是分离的。 数据索引：HBase只有一个索引——行键，HBase中的所有访问方法，或者通过行键访问，或 者通过行键扫描。 数据维护：在HBase中执行更新操作时，并不会删除数据旧的版本，而 是生成一个新的版本，旧的版本仍然保留。  HBase系统架构  HMaster  HMaster可以存在多个，主HMaster由ZooKeeper动态选举 产生 协调RegionServer 管理元信息   ZooKeeper  内部存储着有关HBase的重要元信息和状态信息，担任HMaster与RegionServer之间的服务协调角色   RegionServer  负责Region的存储和管理并与Client交互 处理读写请求   Client  Client提供HBase访问接口 与RegionServer交互读写数 据，并维护cache加快对HBase的访问速度。    4 Kafka 为了降低数据生产者和消费者之间的耦合度而引入的一层“中间件”。","tags":null,"title":"大数据组件"},{"categories":null,"contents":"Java面试问题  底层实现 Arrays.sort的底层实现原理：\n 数据量小于等于60：使用插入排序 数据量大于60：根据数据类型选择排序方式：  基本类型：使用快速排序。因为基本类型相等的值都指向同一个常量池，故不需要考虑稳定性。 Object类型：使用归并排序。因为其具有稳定性。    ","date":"August 27, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/java/java%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/","summary":"Java面试问题  底层实现 Arrays.sort的底层实现原理：\n 数据量小于等于60：使用插入排序 数据量大于60：根据数据类型选择排序方式：  基本类型：使用快速排序。因为基本类型相等的值都指向同一个常量池，故不需要考虑稳定性。 Object类型：使用归并排序。因为其具有稳定性。    ","tags":null,"title":"Java面试问题"},{"categories":null,"contents":"排序方法总结     排序方法 时间复杂度（平均） 时间复杂度（最好） 时间复杂度（最坏） 空间复杂度 稳定性     冒泡排序 O(n^2) O(n) O(n^2) O(1) 稳定   插入排序 O(n^2) O(n) O(n^2) O(1) 稳定   快速排序 O(nlogn) O(nlogn) O(n^2) O(nlogn) 不稳定   归并排序 O(nlogn) O(nlogn) O(nlogn) O(n^2) 稳定   堆排序 O(nlogn) O(nlogn) O(nlogn) O(1) 不稳定    冒泡排序  依次比较相邻元素，并把大数向后交换，比完一轮后最大的数换到了最后。\n重复以上步骤，将第二大的元素放到倒数第二位\u0026hellip;\n 插入排序  对于未排序元素，在已排序序列中从后向前扫描，找到相应位置并插入。\n void merger_sort(Type A[], int left, int right) { if(left \u0026lt; right) { int middle = (left+right)/2; merger_sort(A, left, middle); merger_sort(A, middle, right); merge(A, B, left, middle, right);//合并到数组B  copy(A, B, left, right);//复制回数组A  } } void merge(Type A[], Type B, int left, int middle, int right) { int i = left, j = middle+1, k=1; while((i \u0026lt; middle) \u0026amp;\u0026amp; (j \u0026lt;= right)) { if(c[i] \u0026lt;= c[j]) d[k++] = c[i++]; else d[k++] = c[j++]; } if(i \u0026gt; middle) { for(int q = j; q \u0026lt; m; q++) d[k++] = c[q]; } else { for(int q = i; q \u0026lt;= m; q++) d[k++] = c[q]; } } 快速排序  从数列中挑一个元素，作为“基准”(pivot)。\n将比基准小的元素放在基准前面，比基准大的元素放在基准后面。\n递归地对两个子序列进行快排。\n int partition(int num[], int left, int right) { int x = num[right]; int i = left; int j = left - 1; for (; i \u0026lt; right; i++) { if (num[i] \u0026lt; x) { j++; if (j != i) swap(num[j], num[i]); } } swap(num[j + 1], num[right]); return j + 1; //返回分割点 } void quick_sort(int num[], int left, int right) { if (left \u0026lt; right) { int index = partition(num, left, right); quick_sort(num, left, index - 1); quick_sort(num, index + 1, right); } } 快速排序的稳定版（Java，使用额外空间）：\npublic int[] quickSort(int[] num) { ArrayList\u0026lt;Integer\u0026gt; ar = new ArrayList\u0026lt;\u0026gt;(); for (int i : num) ar.add(i); ArrayList\u0026lt;Integer\u0026gt; ans = quickSort(ar); for (int i = 0; i \u0026lt; num.length; i++) num[i] = ans.get(i); return num; } public static ArrayList\u0026lt;Integer\u0026gt; quickSort(ArrayList\u0026lt;Integer\u0026gt; ar) { if(ar.size() \u0026lt;= 1) return ar; int mid = ar.size() / 2; int pivat = ar.get(mid); ArrayList\u0026lt;Integer\u0026gt; smaller = new ArrayList\u0026lt;\u0026gt;(); ArrayList\u0026lt;Integer\u0026gt; greater = new ArrayList\u0026lt;\u0026gt;(); for(int ind = 0; ind \u0026lt; ar.size(); ind++) { int val = ar.get(ind); if( ind != mid ) { if( val \u0026lt; pivat ) smaller.add(val); else if(val \u0026gt; pivat) greater.add(val); else { if(ind \u0026lt; mid) smaller.add(val); else greater.add(val); } } } ArrayList\u0026lt;Integer\u0026gt; ans = new ArrayList\u0026lt;Integer\u0026gt;(); ArrayList\u0026lt;Integer\u0026gt; sa1 = quickSort(smaller); ArrayList\u0026lt;Integer\u0026gt; sa2 = quickSort(greater); for(Integer val1 : sa1) ans.add(val1); ans.add(pivat); for(Integer val2 : sa2) ans.add(val2); return ans; } 归并排序  分治法。将两个已经排序的序列合并。\n void merge_sort(int num[], int first, int end) { if (first \u0026lt; end) { int mid = (first + end) / 2; merge_sort(num, first, mid); merge_sort(num, mid + 1, end); merge(num, first, mid, end); } } void merge(int num[], int first, int mid, int end) { int n1 = mid - first + 1; int n2 = end - mid; int* L = new int[n1]; int* R = new int[n2]; for(int i = 0; i \u0026lt; n1; i++) L[i] = num[first + i]; for (int j = 0; j \u0026lt; n2; j++) R[j] = num[mid + j + 1]; int i = 0; int j = 0; int k = first; while(i \u0026lt; n1 \u0026amp;\u0026amp; j \u0026lt; n2) { if (L[i] \u0026lt; R[j]) num[k++] = L[i++]; else num[k++] = R[j++]; } while (i \u0026lt; n1) num[k++] = L[i++]; while (j \u0026lt; n2) num[k++] = R[j++]; delete [] L; delete [] R; } 堆排序  堆本质上是一个数组，且我们以二叉树的角度来看待他。\n 实际数组下标以0开始，故：\n 左子结点的编号=父结点编号 * 2 +1 右子结点的编号=父结点编号 * 2 + 2  堆排序的步骤（以从小到大为例）：\n 建立最大堆：建立一颗满足如下条件的二叉树：它的所有的结点的值都比其子结点的值大。建立过程如下：  从后往前，从第一个非叶节点开始，进行调整（比较该节点是否大于其子节点，若不满足则向下交换）。   每次取走根节点的元素（最大元素），用数组末尾的元素代替，然后进行调整  //检查以root为根的子树是否满足大根堆性质，若不满足，则向下调整 void heap_build(int num[], int root, int len) { int lchild = root * 2 + 1; if (lchild \u0026lt; len) { int largest = lchild; int rchild = lchild + 1; if (rchild \u0026lt; len) { if (num[rchild] \u0026gt; num[largest]) largest = rchild; } if (num[root] \u0026lt; num[largest]) { swap(num[root], num[largest]); heap_build(num, largest, len); } } } void heap_sort(int num[], int len) { for (int i = len / 2-1; i \u0026gt;= 0; i--) // 从第一个非叶节点，从后往前调整  heap_build(num, i, len); for (int j = len - 1; j \u0026gt;= 1; j--) { // 不断取根节点，并将剩下元素重新构建大根堆  swap(num[0], num[j]); heap_build(num, 0, --len); } } C++ STL中sort的底层实现  数据量大时采用QuickSort快排算法。一旦分段后的数据量小于某个门槛（16），为避免QuickSort快排的递归调用带来过大的额外负荷，就改用Insertion Sort插入排序。如果递归层次过深，还会改用HeapSort堆排序。\n ","date":"August 27, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/algorithmdatastructure/%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/","summary":"排序方法总结     排序方法 时间复杂度（平均） 时间复杂度（最好） 时间复杂度（最坏） 空间复杂度 稳定性     冒泡排序 O(n^2) O(n) O(n^2) O(1) 稳定   插入排序 O(n^2) O(n) O(n^2) O(1) 稳定   快速排序 O(nlogn) O(nlogn) O(n^2) O(nlogn) 不稳定   归并排序 O(nlogn) O(nlogn) O(nlogn) O(n^2) 稳定   堆排序 O(nlogn) O(nlogn) O(nlogn) O(1) 不稳定    冒泡排序  依次比较相邻元素，并把大数向后交换，比完一轮后最大的数换到了最后。\n重复以上步骤，将第二大的元素放到倒数第二位\u0026hellip;\n 插入排序  对于未排序元素，在已排序序列中从后向前扫描，找到相应位置并插入。\n void merger_sort(Type A[], int left, int right) { if(left \u0026lt; right) { int middle = (left+right)/2; merger_sort(A, left, middle); merger_sort(A, middle, right); merge(A, B, left, middle, right);//合并到数组B  copy(A, B, left, right);//复制回数组A  } } void merge(Type A[], Type B, int left, int middle, int right) { int i = left, j = middle+1, k=1; while((i \u0026lt; middle) \u0026amp;\u0026amp; (j \u0026lt;= right)) { if(c[i] \u0026lt;= c[j]) d[k++] = c[i++]; else d[k++] = c[j++]; } if(i \u0026gt; middle) { for(int q = j; q \u0026lt; m; q++) d[k++] = c[q]; } else { for(int q = i; q \u0026lt;= m; q++) d[k++] = c[q]; } } 快速排序  从数列中挑一个元素，作为“基准”(pivot)。","tags":null,"title":"排序方法总结"},{"categories":null,"contents":"最小生成树  class Graph { public int vertexs; // 顶点个数  public char[] data; // 顶点标识  public int[][] weight; // 邻接矩阵（边的权值）  public int edg_num; // 边的条数  public Graph(int vertexs, char[] data, int[][] weight) { if (vertexs != data.length || weight.length != vertexs || weight[0].length != vertexs) { throw new RuntimeException(\u0026#34;初始化异常！\u0026#34;); } this.vertexs = vertexs; this.data = data; this.weight = weight; } } Prime算法 public class Prime { final static int MAX = Integer.MAX_VALUE; private static int[] prim(Graph graph, int start) { int[] visited = new int[graph.vertexs]; int[] res = new int[graph.vertexs]; for (int k = 1; k \u0026lt; graph.vertexs; k++) { // 循环n-1次  int minWeight = MAX; int h1 = -1; int h2 = -1; for (int i = 0; i \u0026lt; graph.vertexs; i++) { if (visited[i] != 1) continue; for (int j = 0; j \u0026lt; graph.vertexs; j++) { if (visited[j] == 0 \u0026amp;\u0026amp; graph.weigth[i][j] \u0026lt; minWeight) { minWeight = graph.weight[i][j]; h1 = i; h2 = j; } } } res[h1] = h2; } return res; } } Kruskal算法 // 需要实现lang包下的接口 这样可以直接进行排序 class Edg implements Comparable\u0026lt;Edg\u0026gt; { public int start; public int end; public int dis; // 方法省略  ... } public class Kruskal { final static int MAX = Integer.MAX_VALUE; private static void kruskal(Graph graph) { Edg[] edges = new Edg[graph.edg_num]; int index = 0; for (int i = 0; i \u0026lt; graph.vertexs; i++) { for (int j = i + 1; j \u0026lt; graph.vertexs; j++) { if (graph.weight[i][j] != Integer.MAX_VALUE) { edges[index++] = new Edg(graph.data[i], graph.data[j], graph.weight[i][j]); } } } Arrays.sort(edges, (a, b) - \u0026gt; (a.dis-b.dis)); // 对边进行排序  int[] res = new int[graph.vertexs]; for (int i = 0; i \u0026lt; graph.vertexs; i++) res[i] = i; int count = 0; // 需要找到节点数-1条边  for (int i = 0; i \u0026lt; edges.length \u0026amp;\u0026amp; count \u0026lt; graph.vertexs; i++) { Edg edg = edgs[i]; int start_root = find(res, edg.start); int end_root = find(res, edg.end); if (start_root != end_root) { count ++; res[end_root] = start_root; } } return res; } private static int find(int[] res, int i) { int i_root = i; while (res[i_root] != i_root) i_root = res[i_root]; return i_root; } } ","date":"August 27, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/algorithmdatastructure/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/","summary":"最小生成树  class Graph { public int vertexs; // 顶点个数  public char[] data; // 顶点标识  public int[][] weight; // 邻接矩阵（边的权值）  public int edg_num; // 边的条数  public Graph(int vertexs, char[] data, int[][] weight) { if (vertexs != data.length || weight.length != vertexs || weight[0].length != vertexs) { throw new RuntimeException(\u0026#34;初始化异常！\u0026#34;); } this.vertexs = vertexs; this.data = data; this.weight = weight; } } Prime算法 public class Prime { final static int MAX = Integer.","tags":null,"title":"最小生成树"},{"categories":null,"contents":"AndrewNG-CV 基础  1 The Basics of Convolutional Neural Networks 1.1 Edge detection Use filter to do the convolution operation\nOne Example Convolution function in tensorflow: tf.nn.conv2d\nOther Examples  1-\u0026gt;-1: light-\u0026gt;dark -1-\u0026gt;1: dark-\u0026gt;light   Furthermore, treat the 9 numbers as parameters, and use backward propagation to improve them.\n 1.2 Padding(填充)  To preserve the information on the edges and corners.\n  Valid convolutions:  No padding $n\\times n$ * $f\\times f$​ ——\u0026gt; $(n-f+1)\\times(n-f+1)$   Same convolutions:  Pad so that output size is the same as the input size. $n+2p-f+1=n$ ==\u0026gt; $p=\\frac{f-1}{2}$​ f 通常是奇数    1.3 Strided Convolutions  with $n\\times n$​ image, $f\\times f$​​ filter, padding p, stride s, the ouput size is:  $$ \\bigg\\lfloor\\frac{n+2p-f}{s}+1\\bigg\\rfloor\\times\\bigg\\lfloor\\frac{n+2p-f}{s}+1\\bigg\\rfloor $$\n1.4 Convolutions over volumes channels（depths, 第三个维度）相等\nmultiple filters：\n1.5 One Layer of a CNN If layer l is a convolution layer:\n $f^{[l]}=$filter size $p^{[l]}=$​padding $s^{[l]}=$​stride $n_C^{[l]}=$​number of filters Each filter is: $f^{[l]}\\times f^{[l]}\\times n_C^{[l-1]}$​ Weights: $f^{[l]}\\times f^{[l]}\\times n_C^{[l-1]}\\times n_C^{[l]}$​ bias: $n_C{[l]}$ — (1,1,1,$n_C{[l]}$) Input: $n^{[l-1]}_H\\times n^{[l-1]}_W\\times n^{[l-1]}_C$​​ Output: $a^{[l]}=n^{[l]}_H\\times n^{[l]}_W\\times n^{[l]}_C$​​​  $$ n^{[l]}=\\bigg\\lfloor\\frac{n^{[l-1]}+2p^{[l]}-f^{[l]}}{s^{[l]}}+1\\bigg\\rfloor $$\n1.6 Example ConvNet  Height and Width stay the same for a while, and gradually trend down as you go deeper in the neural network.\n  The number of channels gradually increase.\n Types of layer in a convolutional network:\n Convolution (CONV) Pooling (POOL) Fully connected (FC)  1.7 Pooling layers  Max pooling   only has hyperparameters(fixed), doesn\u0026rsquo;t has parameters.\n $$ n^{[l]}=\\bigg\\lfloor\\frac{n^{[l-1]}+2p^{[l]}-f^{[l]}}{s^{[l]}}+1\\bigg\\rfloor $$\n1.8 Neural network example 2 Deep Convolutional Models: Case Study 2.1 Classic Networks LeNet-5  trained on grayscale images(灰度图片)  AlexNet  Similar to LeNet, but much bigger. $\\approx60M$ parameters. Use ReLU  VGG-16  共16个layer CONV层的卷积核和POOLING层的格式都是固定的 $\\approx138M$ parameters. 核VGG-19的表现不相上下  3 Residual Networks (ResNets 残差网络) Residual block  Add \u0026ldquo;short cut\u0026rdquo; (skip connection)  ","date":"August 5, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/ml/andrewng-cv%E5%9F%BA%E7%A1%80/","summary":"AndrewNG-CV 基础  1 The Basics of Convolutional Neural Networks 1.1 Edge detection Use filter to do the convolution operation\nOne Example Convolution function in tensorflow: tf.nn.conv2d\nOther Examples  1-\u0026gt;-1: light-\u0026gt;dark -1-\u0026gt;1: dark-\u0026gt;light   Furthermore, treat the 9 numbers as parameters, and use backward propagation to improve them.\n 1.2 Padding(填充)  To preserve the information on the edges and corners.\n  Valid convolutions:  No padding $n\\times n$ * $f\\times f$​ ——\u0026gt; $(n-f+1)\\times(n-f+1)$   Same convolutions:  Pad so that output size is the same as the input size.","tags":null,"title":"AndrewNG-CV基础"},{"categories":null,"contents":"AndrewNG-Deep Learning 基础  1 Logistic Regression Model 1.1 Binary Classification  To learn a classifier that can input an image represented by the feature vector x, and predict the corresponding label y.\n Notation——n training examples: ($ n_x $为向量维数，$X$为$ n_x\\times m $矩阵) $$ (x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}), \u0026hellip;, (x^{(m)},y^{(m)}),x\\in R^{n_x}, y\\in {0,1} $$\n$$ X=[x^{(1)},x^{(2)},\u0026hellip;,x^{(m)}], X\\in R^{n\\times m} $$\n$$ Y=[y^{(1)},y^{(2)},\u0026hellip;,y^{(m)}], Y\\in R^{1\\times m} $$\n1.2 Logistic Regression  An algorithm for binary classification problems.\n Given x, we want $\\hat{y}=P(y=1|x)$​\nWay:\n  Parameters: $w\\in R^{nx},b\\in R$\n  Output: （$\\sigma$为sigmoid函数，$\\sigma(z)=\\frac{1}{1+e^{-z}}$）\n$$ \\hat{y}=\\sigma(w^Tx+b), (z = w^Tx+b) $$\n  1.3 Cost Function we want $\\hat{y(i)}\\approx y(i)$\nLoss(error) function: $L(\\hat{y},y)=-(y·log\\hat{y}+(1-y)log(1-\\hat{y}))$​\n $\\hat{y(i)}$与$y(i)$越接近，$L(\\hat{y},y)$越小 If $y=1$: $L(\\hat{y},y)=-log\\hat{y}$ If $y=0$: $L(\\hat{y},y)=-log(1-\\hat{y})$   It measures how well you\u0026rsquo;re doing on a single training example.\n Cost function:$J(w,b)=\\frac{1}{m}\\sum_{i = 1}^{m}L(\\hat{y}^{(i)},y^{(i)})$\n It measures how well you\u0026rsquo;re doing on the entire training set.\n 1.4 Gradient Descent  An algorithm to learn the parameteres w and b on your training set.\n $$ w := w-\\alpha\\frac{\\partial J(w,b)}{\\partial w}, b:=b-\\alpha\\frac{\\partial J(w,b)}{\\partial b} $$\n$\\alpha$​​​​ is the learning rate.\nDerivatives (导数)\nComputation Graph backward propagation\n在代码中，可以用dv，da作为变量名。\n$$ \\frac{dJ}{dc}=\\frac{dJ}{dv}\\frac{dv}{du}\\frac{du}{dc}=3\\times1\\times3=9 $$\nGradient Descent on 1 example $$ w_1 := w_1-\\alpha\\frac{\\partial dL}{\\partial w},w_2 := w_2-\\alpha\\frac{\\partial dL}{\\partial w2},b := b-\\alpha\\frac{\\partial dL}{\\partial b} $$\nGradient Descent on m examples  Neural network programming guideline: Whenever possible, avoid explicit for-loops.\n  Use vectorization.\n Forward Propagation: $$ A=\\sigma\\left(w^{T} X+b\\right)=\\left(a^{(1)}, a^{(2)}, \\ldots, a^{(m-1)}, a^{(m)}\\right) $$\n Cost function:  $$ J=-\\frac{1}{m} \\sum_{i=1}^{m}\\left(y^{(i)} \\log \\left(a^{(i)}\\right)+\\left(1-y^{(i)}\\right) \\log \\left(1-a^{(i)}\\right)\\right) $$\nBackward Propagation:\n$$ \\frac{\\partial J}{\\partial w}=\\frac{1}{m} X(A-Y)^{T} $$\n$$ \\frac{\\partial J}{\\partial b}=\\frac{1}{m} \\sum_{i=1}^{m}\\left(a^{(i)}-y^{(i)}\\right) $$\nCode of Optimizing procedure:\ndef propagate(w, b, X, Y): m = X.shape[1] # Forward propogation A = sigmoid(np.dot(w.T, X)+b); cost = -np.average(Y*np.log(A)+(1-Y)*np.log(1-A)) #Backward propagation dw = np.dot(X, (A-Y).T)/m db = np.average(A-Y) cost = np.squeeze(np.array(cost)) grads = {\u0026#34;dw\u0026#34;: dw, \u0026#34;db\u0026#34;: db} return grads, cost def optimize(w, b, X, Y, num_iterations=100, learning_rate=0.009, print_cost=False): for i in range(num_iterations): grads, cost = propagate(w, b, X, Y) dw = grads[\u0026#34;dw\u0026#34;] db = grads[\u0026#34;db\u0026#34;] w = w - learning_rate*dw; b = b - learning_rate*db; 1.5 Python Skill Broadcasting\nA = np.array([1,2,3,4], [5,6,7,8], [9,10,11,12]) cal = A.sum(axis=0) # axis=0垂直方向求和,axis=1水平方向求和 percentage=A/cal.reshape(1,4) # broadcasting(1,4)-\u0026gt;(3,4))  不要用rank=1(秩为1)的array,而要用5*1的矩阵\n a = np.random.randn(5) # bad a = np.random.randn(5,1) # good assert(a.shape==(5,1)) 2 One hidden layer Neural Network 2.1 Neural Network Representation  One hidden layer NN also called a two layer NN (不算输入层)\n 2.2 Forward Propagation On single training example: $$ z^{[1]}=W^{[1]} x+b^{[1]}, a^{[1]}=\\sigma(z^{[1]}) $$\n$$ z^{[2]}=W^{[2]} a^{[1]}+b^{[2]}, a^{[2]}=\\sigma(z^{[2]}) $$\nvectorizing across multiple examples: $$ Z^{[1]} =W^{[1]} X+b^{[1]},A^{[1]}=g^{[1]}(Z^{[1]}), $$\n$$ Z^{[2]} =W^{[2]} A^{[1]}+b^{[2]},A^{[2]}=g^{[2]}(Z^{[2]})=\\sigma(Z^{[2]}) $$\n2.3 Activation functions  tanh: $a=\\frac{e^z-e^{-z}}{e^z+e^{-z}}$   tanh函数在绝大多数场景下比$\\sigma$​函数更适合用作激活函数；唯独在binary classification的输出层，$\\sigma$​​函数更适合用作激活函数。\n  Relu: a=max(0, z)   Relu函数可解决梯度消失的问题，优于tanh函数和$\\sigma$​函数。除了输出层，默认作为激活函数。\n  Leaky Relu: a = max(0.01z, z)  2.4 Derivatives of Activation functions  g(z)=$\\sigma$​(z): $g'(z)=a(1-a)$ g(z)=tanh(z): $g'(z)=1-a^2$​ ReLU:  $$ g'(z)=\\left\\{ \\begin{aligned} 0 \u0026amp; \u0026amp; z\u0026lt;0 \\\\ 1 \u0026amp; \u0026amp; z\\geq0 \\end{aligned} \\right. $$\n Leaky ReLU:  $$ g'(z)=\\left\\{ \\begin{aligned} 0.01 \u0026amp; \u0026amp; z\u0026lt;0 \\\\ 1 \u0026amp; \u0026amp; z\\geq0 \\end{aligned} \\right. $$\n2.5 Gradient descent for neural networks backward propagation:\n$$ dZ^{[2]}=A^{[2]}-Y $$\n$$ dW^{[2]}=\\frac{1}{m}dZ^{[2]}A^{[1]T} $$\n$$ db^{[2]}=\\frac{1}{m}np.sum(dZ^{[2]},axis=1,keepdim=True) $$\n$$ d Z^{[1]}=W^{[2] T} d Z^{[2]} * g^{[1]^{\\prime}}\\left(\\mathrm{Z}^{[1]}\\right) $$\n$$ d W^{[1]}=\\frac{1}{m} d Z^{[1]} X^{T} $$\n$$ d b^{[1]}=\\frac{1}{m} np.sum(d Z^{[1]}, axis=1, keepdims=True) $$\n keepdim=True: 用于防止输出$(n^{[2]},)$，而是输出$(n^{[2]},1)$  2.6 Random Initialization  在Neural network中，w不能初始化为全0。\n $$ w^{[1]}=np.random.randn((2,2))*0.01 $$\n$$ b^{[2]}=np.zero((2,1)) $$\n$$ w^{[1]}=np.random.randn((1,2))*0.01 $$\n$$ b^{[2]}=0 $$\n3 Deep Neural Network  layers: L = 4 ouput: $\\hat{y}=a^{[L]}$  3.1 Forward Propagation for l=1\u0026hellip;4: $$ Z^{[l]}=W^{[l]}A^{[l-1]}+b^{[l]} $$\n$$ A^{[Ll}=g^{[l]}(Z^{[l]}) $$\n3.2 Backward Propagation  Input $da^{[l]}$​ Output $da^{[l-1},dW^{[l]},db^{[l]}$  $$ dZ^{[l]}=dA^{[l]}*{g^{[l]}}'(Z^{[l]}) $$\n$$ dW^{[l]}=\\frac{1}{m}dZ^{[l]}·A^{[l-1]T} $$\n$$ db^{[l]}=\\frac{1}{m}np.sum(dZ^{[l]},AXIS=1, keepdims=True) $$\n$$ dA^{[l-1]}=W^{[l]T}dZ^{[l]} $$\n3.3 Matrix dimensions  $W^{[l]},dW^{[l]}:(n^{[l]},n^{[l-1]})$ $b^{[l]},db^{[l]}:(n^{[l]},1)$ $z^{[l]},a^{[l]}:(n^{[l]},1)$ $Z^{[l]},A^{[l]},dZ^{[l]},dA^{[l]}:(n^{[l]},m)$  3.4 Working procedure 3.5 Parameters \u0026amp; Hyperparameters  Hyperparameters control the parameters.\n Paramerters:\n $W^{[a]},b^{[a]}$​  Hyperparematers:\n learning rate $\\alpha$​ iterations hidden layers L \u0026hellip;\u0026hellip;  ","date":"August 5, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/ml/andrewng-dl%E5%9F%BA%E7%A1%80/","summary":"AndrewNG-Deep Learning 基础  1 Logistic Regression Model 1.1 Binary Classification  To learn a classifier that can input an image represented by the feature vector x, and predict the corresponding label y.\n Notation——n training examples: ($ n_x $为向量维数，$X$为$ n_x\\times m $矩阵) $$ (x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}), \u0026hellip;, (x^{(m)},y^{(m)}),x\\in R^{n_x}, y\\in {0,1} $$\n$$ X=[x^{(1)},x^{(2)},\u0026hellip;,x^{(m)}], X\\in R^{n\\times m} $$\n$$ Y=[y^{(1)},y^{(2)},\u0026hellip;,y^{(m)}], Y\\in R^{1\\times m} $$\n1.2 Logistic Regression  An algorithm for binary classification problems.","tags":null,"title":"AndrewNG-DL基础"},{"categories":null,"contents":"AndrewNG-DL 应用  1 Setting up ML application 1.1 Train/dev/test set  Training set Validation/Development set: used for selecting model. Test set: used for assessment of the generalization error of the final chosen model.   In previous era, we with limited data, we use 60/20/20 for tain/dev/test.\nIn Big data era, we use 99% of data as training set.\n  Make sure dev and test set come from same distribution.\n 1.2 Bias(偏差)/Variance(方差)    Train set error Dev set error Evaluation     1% 11% high variance (过拟合)   15% 16% high bias (欠拟合)   15% 30% high bias \u0026amp; high variance   0.5% 1% low bias \u0026amp; low variance    .\n If the output(base) error is high, 15% for example, then the above is not high bias.\n 1.3 Regularization(正则化)  Regularization helps to prevent overfitting, or reduce the errors in NN.\n In Logistic Regression $$ J(w,b)=\\frac{1}{m}\\sum^{m}_{i=1}L(\\hat{y}^{(i)},y^{(i)})+\\frac{\\lambda}{2m}||w||_2^2 $$\n $\\lambda$: regularization parameter L2 regularization: $||w||_2^2$  $\\sum_{j=1}^{n_x}w_j^2=w^Tw$ used most often.   L1 regularization: $||w||_1$  $\\sum_{j=1}^{n_x}|w_j|$​ w will be sparse (the vector w will have a lot of zeros in it)    In Neural Network $$ J(w,b)=\\frac{1}{m}\\sum^{m}{i=1}L(\\hat{y}^{(1)},y^{(1)},\u0026hellip;,\\hat{y}^{(L)},y^{(L)})+\\frac{\\lambda}{2m}\\sum^L{l=1}||w^{[l]}||_F^2 $$\n $||w^{[l]}||=\\sum_{i=1}^{n[l-1]}\\sum_{j=1}^n(w_{ij}^{[l]})^2$​​ (Forbenius norm)  ","date":"August 5, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/ml/andrewng-dl%E5%BA%94%E7%94%A8/","summary":"AndrewNG-DL 应用  1 Setting up ML application 1.1 Train/dev/test set  Training set Validation/Development set: used for selecting model. Test set: used for assessment of the generalization error of the final chosen model.   In previous era, we with limited data, we use 60/20/20 for tain/dev/test.\nIn Big data era, we use 99% of data as training set.\n  Make sure dev and test set come from same distribution.","tags":null,"title":"AndrewNG-DL应用"},{"categories":null,"contents":"AndrewNG-GAN  Course 1 —— Build Basic GANs 1.1 Introduction Generative Models:   Variational Autoencoders(VAE):\n  GANS:\n  GAN in Real Life  GAN的创始人：Ian Goodfellow GAN的应用领域：  Image Generation, Deep fake Text Generation Data Augmentaion Image Filters    1.2 Basic Components Discriminator   Use Neural Networks, input: features(image), output: probability\n  0.85这个概率也会交给Generator\n  Input features e.g.: RGB pixel values for images\n  Generator   Use Neural Networks, input: class+noise vector, output: features(image)\n  Generator目标是让Fake Example的Y^尽量接近1，而Discriminator目标是让其尽量接近0\n  当训练的足够好时，Save Generator（θ）, use random noise to sample more images.\n  The generator learns the probability of features X.\n  BCE Cost Function   前一半：当label y 为0时，为0；当label y 为1时，若Prediction接近1则为0，若Prediction接近0则为负无穷。   后一半：当label y 为1时，为0；当label y 为0时，若Prediction接近0则为1，若Prediction接近1则为负无穷。   综合起来，如果Prediction与label相比非常不准确，则最终的值很大。  Putting it Together  最开始，Discriminator和Generator的水平应该相近。 Discriminator的任务难度比Generator更简单。 若Discriminator过于强大，Generator生成的假图片都被判别为100%fake，100%fake对于Generator没有意义，因为其不知道向哪个方向改进。  Coding  PyTorch vs TensorFlow      Initialization of the model\n  Cost function\n  Optimizer: stochastic gradient descent (随机梯度下降)，lr为learning rate\n  Training loop for number of epochs\n  1.3 More Components Activations   Activation functions are non-linear (to approximate complex functions) and differentiable (for back propagation)\n  ReLU (Rectified Linear Unit)\n Problem: Dying ReLU problem    Leaky ReLU:\n  Sigmoid:\n often used for the last layer Problem: vanishing gradient in saturation problems    Tanh (Hyperbolic Tangent):\n  between -1 and 1\n    Batch Normalization applied on training data and test data.\n Batch normalization smooths the cost function Batch normalization reduces the internal covariance shift Batch normalization speeds up learning  Convolution  scan the image to detect useful features Just element-wise products and sums  Stride\u0026amp;Padding   Stride: determines how the filter scans the image\n  Padding: gives similar importance to the edges and the center\n  Pooling\u0026amp;Upsampling   Pooling: reduces the size of the input\n  Upsampling: increases the size of the input\n  Difference with convolution: Pooling and Upsampling have no learnable parameters, so they involve no learning.\n  Transposed Convolution  have learnable parameters Problem: results have a checkerboard pattern  1.4 Some Problems of Traditional GANs Mode Collapse  Mode Collapse happens when the generator gets stuck in one mode.  Problems with BCE loss  Flat regions on the cost function = vanishing gradients  1.5 Conditional Generation ","date":"August 5, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/ml/andrewng-gan%E5%9F%BA%E7%A1%80/","summary":"AndrewNG-GAN  Course 1 —— Build Basic GANs 1.1 Introduction Generative Models:   Variational Autoencoders(VAE):\n  GANS:\n  GAN in Real Life  GAN的创始人：Ian Goodfellow GAN的应用领域：  Image Generation, Deep fake Text Generation Data Augmentaion Image Filters    1.2 Basic Components Discriminator   Use Neural Networks, input: features(image), output: probability\n  0.85这个概率也会交给Generator\n  Input features e.g.: RGB pixel values for images\n  Generator   Use Neural Networks, input: class+noise vector, output: features(image)","tags":null,"title":"AndrewNG-GAN基础"},{"categories":null,"contents":"I. Java 基础语法 基本语法  类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写。 方法名应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。 源文件名必须和类名相同。 一个源文件中只能有一个 public类，可以有多个非 public类 所有的 Java 程序由 public static void main(String[] args) 方法开始执行。  Java 源程序与编译型运行区别 Java 基本数据类型    类型 数据类型 长度(位)     整型 byte 8   整型 short 16   整型 int 32   整型 long 64   整型 boolean 1   整型 char 16   浮点型 float 32   浮点型 double 64    自动类型转环  byte,short,char—\u0026gt; int —\u0026gt; long—\u0026gt; float —\u0026gt; double\n Java 变量  Java 变量包括包括：局部变量、类变量（静态变量）、成员变量（非静态变量）\n public class Variable{ static int allClicks=0; // 类变量  String str=\u0026#34;hello world\u0026#34;; // 实例变量  public void method(){ int i =0; // 局部变量  } }  局部变量：栈上分配，无默认值 类变量：  无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。 静态变量储存在静态存储区 静态变量可以通过：ClassName.VariableName的方式访问。   实例变量：有默认值，通常为0  Java 数组  数组是储存在堆上的对象\n 传值与传引用  基本类型，Integer、Long、Byte、Double、Float、Short，及String作为参数传递时，是传递值的拷贝，无论你怎么改变这个拷贝，原值是不会改变的；\n其它对象作为参数传递时，是把对象在内存中的地址拷贝了一份传给了参数。\n ","date":"July 27, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/java/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","summary":"I. Java 基础语法 基本语法  类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写。 方法名应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。 源文件名必须和类名相同。 一个源文件中只能有一个 public类，可以有多个非 public类 所有的 Java 程序由 public static void main(String[] args) 方法开始执行。  Java 源程序与编译型运行区别 Java 基本数据类型    类型 数据类型 长度(位)     整型 byte 8   整型 short 16   整型 int 32   整型 long 64   整型 boolean 1   整型 char 16   浮点型 float 32   浮点型 double 64    自动类型转环  byte,short,char—\u0026gt; int —\u0026gt; long—\u0026gt; float —\u0026gt; double","tags":null,"title":"Java基础语法"},{"categories":null,"contents":"Java集合框架   参考：https://docs.oracle.com/javase/8/docs/api/index.html\n 1 继承关系图 2 常用函数总结 栈和队列 栈的两种实现形式\nDeque\u0026lt;Integer\u0026gt; queue = new LinkedList\u0026lt;Integer\u0026gt;(); // 推荐 Stack\u0026lt;Integer\u0026gt; queue2 = new Stack\u0026lt;Integer\u0026gt;();  E push(E item)   java.util.Stack中，加入尾部\njava.util.LinkedList中(接口Deque中规定)，加入头部\n  boolean add(E e)   加入尾部，两种方法均可使用，java.util.Collection中规定\n  E pop()   java.util.Stack中，弹出尾部\njava.util.LinkedList中(接口Deque中规定)，弹出头部\n  E get(int index)   由于Deque接口中没有get方法（Deque继承自Queue），故使用LinkedList时无法用get\n而Stack继承自Vector-\u0026gt;List，故使用Stack时可以用get\n  E poll()   java.util.LinkedList中(接口Deque中规定)，弹出头部，同pop\njava.util.Stack中无法使用\n  E peek()   java.util.Stack中，返回尾部\njava.util.LinkedList中(接口Deque中规定)，返回头部\n Map  V put(K key, V value)  Queue  boolean offer(E e)  Size \u0026amp; Length  int size()   java.util.Collection中的一个方法\n  length   任何数组的属性\n  int length()   java.lang.String的一个方法\n String \u0026amp; StringBuffer  void setCharAt(int index, char ch)   StringBuffer中的一个方法，String无法使用\n Integer 和 String Integer a = Integer.valueOf(\u0026#34;124\u0026#34;); String str = String.valueOf(123); equals和==的区别  == 比较的是**变量(栈)内存中存放的对象的(堆)内存地址，**用来判断两个对象的地址是否相同，即是否是指相同一个对象 equals用来比较的是两个对象的内容是否相等  Arrays.sort自定义 sort默认为升序\n几种降序定义\nInteger[] arr = {5,4,7,9,2,12,54,21,1}; // Method 1 Arrays.sort(arr, new Comparator\u0026lt;Integer\u0026gt;() { public int compare(Integer a, Integer b) { return b-a; } }); // Method 2 Arrays.sort(arr, (a, b) -\u0026gt; { return b-a; }); // Method 3 Arrays.sort(arr, (a, b) -\u0026gt; (b-a)); // Method 4 Arrays.sort(arr, (a, b) -\u0026gt; b.compareTo(a)); PriorityQueue自定义 Queue\u0026lt;Integer\u0026gt; A = new PriorityQueue\u0026lt;\u0026gt;((x, y) -\u0026gt; (y - x)); // 大顶堆 ","date":"July 27, 2021","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/java/java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/","summary":"Java集合框架   参考：https://docs.oracle.com/javase/8/docs/api/index.html\n 1 继承关系图 2 常用函数总结 栈和队列 栈的两种实现形式\nDeque\u0026lt;Integer\u0026gt; queue = new LinkedList\u0026lt;Integer\u0026gt;(); // 推荐 Stack\u0026lt;Integer\u0026gt; queue2 = new Stack\u0026lt;Integer\u0026gt;();  E push(E item)   java.util.Stack中，加入尾部\njava.util.LinkedList中(接口Deque中规定)，加入头部\n  boolean add(E e)   加入尾部，两种方法均可使用，java.util.Collection中规定\n  E pop()   java.util.Stack中，弹出尾部\njava.util.LinkedList中(接口Deque中规定)，弹出头部\n  E get(int index)   由于Deque接口中没有get方法（Deque继承自Queue），故使用LinkedList时无法用get\n而Stack继承自Vector-\u0026gt;List，故使用Stack时可以用get\n  E poll()   java.util.LinkedList中(接口Deque中规定)，弹出头部，同pop\njava.util.Stack中无法使用\n  E peek()   java.","tags":null,"title":"Java集合框架"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/database/4-e-r%E5%9B%BE/","summary":"","tags":null,"title":""},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/posts/database/5-schema-normaliztion/","summary":"","tags":null,"title":""},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://ericwang007.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"}]