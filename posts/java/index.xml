<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on EricWang's Blog</title><link>https://ericwang007.github.io/posts/java/</link><description>Recent content in Java on EricWang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 27 Aug 2021 06:00:20 +0600</lastBuildDate><atom:link href="https://ericwang007.github.io/posts/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java面试问题</title><link>https://ericwang007.github.io/posts/java/java%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link><pubDate>Fri, 27 Aug 2021 06:00:20 +0600</pubDate><guid>https://ericwang007.github.io/posts/java/java%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid><description>Java面试问题 底层实现 Arrays.sort的底层实现原理：
数据量小于等于60：使用插入排序 数据量大于60：根据数据类型选择排序方式： 基本类型：使用快速排序。因为基本类型相等的值都指向同一个常量池，故不需要考虑稳定性。 Object类型：使用归并排序。因为其具有稳定性。</description></item><item><title>Java基础语法</title><link>https://ericwang007.github.io/posts/java/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Tue, 27 Jul 2021 06:00:20 +0600</pubDate><guid>https://ericwang007.github.io/posts/java/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>I. Java 基础语法 基本语法 类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写。 方法名应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。 源文件名必须和类名相同。 一个源文件中只能有一个 public类，可以有多个非 public类 所有的 Java 程序由 public static void main(String[] args) 方法开始执行。 Java 源程序与编译型运行区别 Java 基本数据类型 类型 数据类型 长度(位) 整型 byte 8 整型 short 16 整型 int 32 整型 long 64 整型 boolean 1 整型 char 16 浮点型 float 32 浮点型 double 64 自动类型转环 byte,short,char—&amp;gt; int —&amp;gt; long—&amp;gt; float —&amp;gt; double</description></item><item><title>Java集合框架</title><link>https://ericwang007.github.io/posts/java/java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</link><pubDate>Tue, 27 Jul 2021 06:00:20 +0600</pubDate><guid>https://ericwang007.github.io/posts/java/java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</guid><description>Java集合框架 参考：https://docs.oracle.com/javase/8/docs/api/index.html
1 继承关系图 2 常用函数总结 栈和队列 栈的两种实现形式
Deque&amp;lt;Integer&amp;gt; queue = new LinkedList&amp;lt;Integer&amp;gt;(); // 推荐 Stack&amp;lt;Integer&amp;gt; queue2 = new Stack&amp;lt;Integer&amp;gt;(); E push(E item) java.util.Stack中，加入尾部
java.util.LinkedList中(接口Deque中规定)，加入头部
boolean add(E e) 加入尾部，两种方法均可使用，java.util.Collection中规定
E pop() java.util.Stack中，弹出尾部
java.util.LinkedList中(接口Deque中规定)，弹出头部
E get(int index) 由于Deque接口中没有get方法（Deque继承自Queue），故使用LinkedList时无法用get
而Stack继承自Vector-&amp;gt;List，故使用Stack时可以用get
E poll() java.util.LinkedList中(接口Deque中规定)，弹出头部，同pop
java.util.Stack中无法使用
E peek() java.</description></item></channel></rss>