<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Database on EricWang's Blog</title><link>https://ericwang007.github.io/posts/database/</link><description>Recent content in Database on EricWang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 30 Aug 2021 06:00:20 +0600</lastBuildDate><atom:link href="https://ericwang007.github.io/posts/database/index.xml" rel="self" type="application/rss+xml"/><item><title>1 Introduction</title><link>https://ericwang007.github.io/posts/database/1-introduction/</link><pubDate>Mon, 30 Aug 2021 06:00:20 +0600</pubDate><guid>https://ericwang007.github.io/posts/database/1-introduction/</guid><description>1 Introduction DBMS &amp;amp; DBS
DBS：数据库系统 包括：DBMS、数据库、数据库应用程序、数据库管理人员 DBMS：数据库管理系统 对数据的管理包括：定义信息的存储格式、提供操作信息的方法 三级模式结构
内模式（物理层）：数据如何存储、第层数据结构 逻辑模式（逻辑层）：描述数据库中存的是什么数据，以及这些数据之间的关系，数据库管理人员运用逻辑层的抽象。是一个全局逻辑结构。 外模式（视图层）：数据库用户能够看到的和使用的局部数据的逻辑结构。系统可以为同一个数据库提供多个视图。 逻辑数据独立性：当概念模式变化时，可以不改变外部模式和应用程序。
物理数据独立性：当内部模式变化时，可以不改变概念模式和外部模式。
Instance（实例）：某一时刻，数据库中存储的数据集合
Schema（模式）：数据库系统的总体设计
Data-Definition Language (DDL)：create、alter、drop
Data-Manipulation Language (DML)：如SQL中的insert、delete from、update</description></item><item><title>Relation Database</title><link>https://ericwang007.github.io/posts/database/2-relation-database/</link><pubDate>Mon, 30 Aug 2021 06:00:20 +0600</pubDate><guid>https://ericwang007.github.io/posts/database/2-relation-database/</guid><description>2 Relation Database 关系模式
关系实例
super key：一个或多个属性的集合，这些属性的组合可以使我们在一个关系中唯一地标识一个元组。
candidate key：最小的super key
primary key：被设计者选中的 candidate key
**foreign key: ** 一个关系模式（r1）在它的属性中包括另一个关系模式（r2）的 primary key，则这个属性在r1上称作参照r2的 foreign key.
r1称作 foreign key 依赖的参照关系（referencing relation），r2称作 foreign key 的被参照关系(referenced relation)。 **参照完整性约束(referential integrity constraint): **在参照关系中任意元组在特定属性上的取值必然等于被参照关系在特定属性上的取值。</description></item><item><title>SQL</title><link>https://ericwang007.github.io/posts/database/3-sql/</link><pubDate>Mon, 30 Aug 2021 06:00:20 +0600</pubDate><guid>https://ericwang007.github.io/posts/database/3-sql/</guid><description>3 SQL Data Definition create table create table instructor( ID char(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2), primary key(ID), foreign key(dept_name) references department, check(salary&amp;gt;0); ) insert insert into instructor values(080040, &amp;#39;Jack&amp;#39;, &amp;#39;Com.Sci&amp;#39;, 8000) delete delete from isntructor drop drop table r alter table alter table r add A D alter table r drop A Select Query select distinct dept_name from instructor # 去重 select all dept_name from instructor # 不去重 select T.</description></item><item><title/><link>https://ericwang007.github.io/posts/database/4-e-r%E5%9B%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ericwang007.github.io/posts/database/4-e-r%E5%9B%BE/</guid><description/></item><item><title/><link>https://ericwang007.github.io/posts/database/5-schema-normaliztion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ericwang007.github.io/posts/database/5-schema-normaliztion/</guid><description/></item></channel></rss>